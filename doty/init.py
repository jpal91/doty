import os
import pygit2
from helpers.args import init_args

TEMP_DIR = '/tmp/dotytmp/dotfiles'

def gen_dotyrc(dotfiles_path: str) -> str:
    dotyrc_str = f"""\
# This file is automatically generated by doty and contains env variables.
DOTFILES_PATH="{dotfiles_path}"
GIT_AUTHOR_NAME="doty"
GIT_AUTHOR_EMAIL="doty@email.com"
"""
    return dotyrc_str

def init(temp: bool = False) -> None:
    # Create the dotfiles directory if it doesn't exist
    dotfiles_dir = os.path.join(os.environ['HOME'], 'dotfiles') if not temp else TEMP_DIR
    
    if temp and os.path.exists(dotfiles_dir):
        os.system(f'rm -rf {dotfiles_dir}')
        os.mkdir(dotfiles_dir)
    elif os.path.exists(dotfiles_dir) and os.path.isdir(os.path.join(dotfiles_dir, '.git')):
        # TODO: Check if the dotfiles directory is a git repo and add handlers
        print('dotfiles directory already exists')
        return
    elif not os.path.exists(dotfiles_dir):
        os.makedirs(dotfiles_dir)

    # Initialize the git repo
    repo = pygit2.init_repository(dotfiles_dir)

    # Create the .doty_config directory if it doesn't exist
    doty_config_dir = os.path.join(dotfiles_dir, '.doty_config')
    if not os.path.exists(doty_config_dir):
        os.mkdir(doty_config_dir)
    
    # Create doty_lock.yml if it doesn't exist
    doty_lock_path = os.path.join(doty_config_dir, 'doty_lock.yml')
    if not os.path.exists(doty_lock_path):
        with open(doty_lock_path, 'w') as doty_lock:
            doty_lock.write('# Path: ~/.doty_config/doty_lock.yml\n')
            doty_lock.write('# This file is used to keep track of dotfiles and their respective repositories.\n')
            doty_lock.write('# It is recommended that you do not edit this file directly.\n')
            doty_lock.write('# Instead, use the \'doty add\' command.\n')

    # Create the dotyrc file if it doesn't exist
    dotyrc_path = os.path.join(doty_config_dir, 'dotyrc')
    if not os.path.exists(dotyrc_path):
        with open(dotyrc_path, 'w') as dotyrc:
            dotyrc.write(gen_dotyrc(dotfiles_dir))
    
    # Create the .dotyignore file if it doesn't exist
    dotyignore_path = os.path.join(doty_config_dir, '.dotyignore')
    if not os.path.exists(dotyignore_path):
        with open(dotyignore_path, 'w') as dotyignore:
            dotyignore.write('# Add any file names here for Doty to ignore.\n# File names in .dotyignore will not be symlinked, but can be committed to the dotfiles repo.')
    
    # Make first commmit
    index = repo.index
    index.add_all()
    index.write()
    tree = index.write_tree()
    author_commiter = pygit2.Signature('doty', 'doty@email.com')
    repo.create_commit('HEAD', author_commiter, author_commiter, 'Initialized Doty Repo', tree, [])

if __name__ == '__main__':
    args = init_args()
    init()