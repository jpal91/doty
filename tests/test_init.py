import os
import pytest
import pygit2
import doty.init as dinit
from doty.init import init, gen_dotyrc

@pytest.fixture(scope='module')
def setup(tmp_path_factory):
    home = tmp_path_factory.mktemp('init_dir')
    temp_init = tmp_path_factory.mktemp('init_temp_dir')
    os.environ.update({'HOME': str(home)})
    return home, temp_init

def test_gen_dotyrc(setup):
    dotfiles_path = setup[0] / 'dotfiles'
    dotyrc = gen_dotyrc(dotfiles_path).split('\n')
    dotyrc.pop()

    assert dotyrc == [
        '# This file is automatically generated by doty and contains env variables.',
        f'DOTFILES_PATH="{dotfiles_path}"',
        'GIT_AUTO_COMMIT=true',
        'GIT_AUTHOR_NAME="doty"',
        'GIT_AUTHOR_EMAIL="doty@email.com"',
        'DOTY_FILE_LOGGING=true',
        f'DOTY_LOG_PATH="{dotfiles_path}/.doty_config/doty.log"',
        'DOTY_COLOR_LOGGING=true'
    ]

@pytest.mark.parametrize('temp_init', [False, True])
def test_init(setup, temp_init, monkeypatch):
    init_dir, temp_init_dir = setup

    if temp_init:
        monkeypatch.setattr(dinit, 'TEMP_DIR', str(temp_init_dir / 'dotfiles'))
        assert dinit.TEMP_DIR == str(temp_init_dir / 'dotfiles')
        init(temp=True)
        directory = temp_init_dir
    else:
        init()
        directory = init_dir

    dotfiles_path = directory / 'dotfiles'
    doty_config_dir = dotfiles_path / '.doty_config'
    doty_lock_path = doty_config_dir / 'doty_lock.yml'
    dotyrc_path = doty_config_dir / 'dotyrc'
    dotyignore_path = doty_config_dir / '.dotyignore'
    gitignore_path = dotfiles_path / '.gitignore'

    assert os.path.exists(dotfiles_path)
    assert os.path.isdir(dotfiles_path)
    assert os.path.exists(doty_config_dir)
    assert os.path.isdir(doty_config_dir)
    assert os.path.exists(doty_lock_path)
    assert os.path.isfile(doty_lock_path)
    assert os.path.exists(dotyrc_path)
    assert os.path.isfile(dotyrc_path)
    assert os.path.exists(dotyignore_path)
    assert os.path.isfile(dotyignore_path)
    assert os.path.exists(gitignore_path)

    with open(doty_lock_path, 'r') as doty_lock:
        assert doty_lock.readline() == '# Path: ~/.doty_config/doty_lock.yml\n'
        assert doty_lock.readline() == '# This file is used to keep track of dotfiles and their respective repositories.\n'
        assert doty_lock.readline() == '# It is recommended that you do not edit this file directly.\n'
        assert doty_lock.readline() == '# Instead, use the \'doty add\' command.\n'

@pytest.fixture
def init_repo(setup):
    init_dir, _ = setup
    dotfiles_path = init_dir / 'dotfiles'
    repo = pygit2.init_repository(str(dotfiles_path))
    return repo

def test_exit_on_existing_repo(setup, init_repo):
    init_dir, _ = setup
    dotfiles_path = init_dir / 'dotfiles'
    repo = pygit2.Repository(str(dotfiles_path))
    assert repo.is_empty == False

    with pytest.raises(SystemExit) as e:
        init()
    assert e.type == SystemExit
    assert e.value.code == 1